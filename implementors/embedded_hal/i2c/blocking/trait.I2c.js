(function() {var implementors = {};
implementors["embedded_hal"] = [];
implementors["esp_idf_hal"] = [{"text":"impl&lt;I2C, SDA, SCL&gt; <a class=\"trait\" href=\"embedded_hal/i2c/blocking/trait.I2c.html\" title=\"trait embedded_hal::i2c::blocking::I2c\">I2c</a>&lt;u8&gt; for <a class=\"struct\" href=\"esp_idf_hal/i2c/struct.Master.html\" title=\"struct esp_idf_hal::i2c::Master\">Master</a>&lt;I2C, SDA, SCL&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I2C: <a class=\"trait\" href=\"esp_idf_hal/i2c/trait.I2c.html\" title=\"trait esp_idf_hal::i2c::I2c\">I2c</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;SDA: <a class=\"trait\" href=\"esp_idf_hal/gpio/trait.OutputPin.html\" title=\"trait esp_idf_hal::gpio::OutputPin\">OutputPin</a> + <a class=\"trait\" href=\"esp_idf_hal/gpio/trait.InputPin.html\" title=\"trait esp_idf_hal::gpio::InputPin\">InputPin</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;SCL: <a class=\"trait\" href=\"esp_idf_hal/gpio/trait.OutputPin.html\" title=\"trait esp_idf_hal::gpio::OutputPin\">OutputPin</a>,&nbsp;</span>","synthetic":false,"types":["esp_idf_hal::i2c::Master"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()